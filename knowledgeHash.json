//https://github.com/shawnfan/LintCode/blob/master/Java/
/*
//Format:
"name" : {
	"nickname": "",
	"property" : [
		"x",
	],
	"problems" : [
		"x",
	]
}

*/
{
	"int" : {
		"nickname": "整数",
		"property" : [
			"Integer.parseInt(), INT_MAX, INT_MIN",
		],
		"problems" : [
			"",
		]
	},
	"String" : {
		"nickname": "",
		"property" : [
			"toCharArry, charAt(), StringBuffer",
		],
		"problems" : [
			"",
		]
	},
	"Recursive" : {
		"nickname": "递归",
		"property" : [
			"找所有方案，搜索",
		],
		"problems" : [
			"Generate Parentheses",
			"Subsets",
			"Permudation",
			"NQueen"
		]
	},
	"Iterative" : {
		"nickname": "迭代",
		"property" : [
			"能递归，常常就能Iterative",
			"Queue",
			"Unique Permudation mark visited",
		],
		"problems" : [
			"Subsets",
			"Permudation",
		]
	},
	"dp" : {
		"nickname":"Dynamic Programming, DP, 动态规划",
		"property" : [
			"state,function,init,return",
		],
		"problems:" : [
			"Backpack",
			"BackPack II"

		]
	},
	"union-find" : {
		"nickname": "Disjoint Set, 并查集",
		"property" : [],
		"problems" : [
			"Find the Weak Connected Component in the Directed Graph",
			"Graph Valid Tree",

		]
	},
	"Binary tree" : {
		"nickname": "二叉树",
		"property" : [
			"recursive, left, right"
		],
		"problems" : [
			"Binary Tree Paths",
			"Binary Tree Preorder Traversal",
			
		]
	},
	"Binary Search" : {
		"nickname": "",
		"property" : [
			"start + 1 < end",
			"mid = start + (end - start)",
			"不同的题目，match的condition可能会不太一样"
		],
		"problems" : [
			"Search for a Range",
			"Search Insert Position",
			"Search in Rotated Sorted Array",
			"Search a 2D Matrix",
			"First Bad Version",
			"Find Peak Element",
			""
		]
	},
	"Rotate" : {
		"nickname": "翻转",
		"property" : [
			"中间截开一段，放在前面",
			"常常需要分段翻转几回，做一个reverse function"
		],
		"problems" : [
			"Reverse Words in a string",
			"Rotated String",
			"Recover Sorted Array"
		]
	},

	"Trie" : {
		"nickname": "Just a Tree",
		"property" : [
			"HashMap, store word, search word"
		],
		"problems" : [
			"Implement Trie",
			"Add and Search Word",
			"Word Search II",

		]
	},
	"Toposort" : {
		"nickname": "Topological Sort",
		"property" : [
			"NO CYCLE: Only possible if the graph has no directed cycle.",
			"Must have a Sink vertex, the most outgoing vertex, where it all ends",
			"via DFS (around 11:40 mins:): https://class.coursera.org/algo-003/lecture/52",
			"Mark node visited, global current-label to mark the sequence from n to 1"
		],
		"problems" : [
			"Course Schedule",
		]
	},
	"KMP" : {
		"nickname": "String Seaching Algorithm",
		"property" : [
			"May or may not be testing this on strstr. Unlikely. https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm",
		],
		"problems" : [
			"StrStr",
		]
	}
		
}


